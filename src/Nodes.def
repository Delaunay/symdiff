#ifndef SYMDIFF_NODES_DEFINITIONS
#   error "This header is only meant to be included as an X-macro"
#endif

// the macro SYMDIFF_NODES_DEFINITIONS needs to be defined
/*
 *  This file use the X-Macro trick to define nodes.
 *  Nodes are added here.
 *
 *  instead of having a single X-macro that needs to be defined
 *  we have 3 X macro
 *
 *    - DEFINE_BINARY_NODE
 *    - DEFINE_UNARY_NODE
 *    - DEFINE_LEAF_NODE
 *
 *  Those macro are used to generate C++ code at compile time.
 *  The visitor pattern will later be used to traverse the tree without
 *  modifying the generated code.
 *
 *  Example: create a type_id enum
 *
 *  enum class TypeID {
 *    #define SYMDIFF_NODES_DEFINITIONS
 *      #define DEFINE_LEAF_NODE  (__type__, __str__, __repr__)  __str__,
 *      #define DEFINE_UNARY_NODE (__type__, __str__, __repr__)  __str__,
 *      #define DEFINE_BINARY_NODE(__type__, __str__, __repr__)  __str__,
 *      #include "Nodes.def"
 *    #undef SYMDIFF_NODES_DEFINITIONS
 *  };
 *
 */

#ifdef DEFINE_ALL_NODES
#   define DEFINE_LEAF_NODE(__type__, __str__, __repr__) DEFINE_ALL_NODES(__type__, __str__, __repr__)
#   define DEFINE_UNARY_NODE(__type__, __str__, __repr__) DEFINE_ALL_NODES(__type__, __str__, __repr__)
#   define DEFINE_BINARY_NODE(__type__, __str__, __repr__) DEFINE_ALL_NODES(__type__, __str__, __repr__)
#   define DEFINE_NNARY_NODE(__type__, __str__, __repr__) DEFINE_ALL_NODES(__type__, __str__, __repr__)
#endif

// if not defined ignore them
#ifndef DEFINE_NNARY_NODE
#   define DEFINE_NNARY_NODE(__type__, __str__, __repr__)
#endif

#ifndef DEFINE_BINARY_NODE
#   define DEFINE_BINARY_NODE(__type__, __str__, __repr__)
#endif

#ifndef DEFINE_UNARY_NODE
#   define DEFINE_UNARY_NODE(__type__, __str__, __repr__)
#endif

#ifndef DEFINE_SVM_NODE
#   define DEFINE_SVM_NODE(__type__, __str__, __repr__)
#endif

#ifndef DEFINE_RVM_NODE
#   define DEFINE_RVM_NODE(__type__, __str__, __repr__)
#endif

// yes a leaf is not a node, whatever
#ifndef DEFINE_LEAF_NODE
#   define DEFINE_LEAF_NODE(__type__, __str__, __repr__)
#endif

#define DEFINE_LEAF_NODE_SEC(a, b, c)
#define DEFINE_BINARY_NODE_SEC(a, b, c)
#define DEFINE_UNARY_NODE_SEC(a, b, c)


DEFINE_LEAF_NODE_SEC(Leaf,    leaf,        leaf)
DEFINE_LEAF_NODE(Placeholder, placeholder, p)
DEFINE_LEAF_NODE(Value,       value,       v)

//DEFINE_NNARY_NODE_SEC(Nnary, nnary, nnary)
//DEFINE_NNARY_NODE(Add,    add ,   +)
//DEFINE_NNARY_NODE(Mult,   mult,   *)

DEFINE_BINARY_NODE_SEC(Binary, binary, binary)
DEFINE_BINARY_NODE(BinaryNode,    add ,   +)
DEFINE_BINARY_NODE(BinaryNode,   mult,   *)
DEFINE_BINARY_NODE(BinaryNode,    pow ,   ^)

DEFINE_UNARY_NODE_SEC(UnaryNode, unary, unary)
//DEFINE_UNARY_NODE(Sub,   sub,   -)
DEFINE_UNARY_NODE(UnaryNode,   neg,   -)
//DEFINE_UNARY_NODE(Exp,   exp,   e)
//DEFINE_UNARY_NODE(Ln,    ln,    ln)

//DEFINE_UNARY_NODE(Cos,   cos,   cos)
//DEFINE_UNARY_NODE(Sin,   sin,   sin)
//DEFINE_UNARY_NODE(Tan,   tan,   tan)
// must be last
DEFINE_UNARY_NODE(UnaryNode,   inv,   1/)

DEFINE_NNARY_NODE(Cond,  cond, cond)

// Virtual Machine Operation
// Those node do not exist in the language
// Stack VM
DEFINE_SVM_NODE(Push, push, push)
DEFINE_SVM_NODE(Lookup, lookup, lookup)
DEFINE_SVM_NODE(Branch, branch, branch)

// Register VM
DEFINE_RVM_NODE(Load, load, load)
DEFINE_RVM_NODE(Move, move, move)
DEFINE_RVM_NODE(Lookup, lookup, lookup)
DEFINE_RVM_NODE(Branch, branch, branch)

#undef DEFINE_LEAF_NODE
#undef DEFINE_UNARY_NODE
#undef DEFINE_BINARY_NODE
#undef DEFINE_NNARY_NODE
#undef DEFINE_SVM_NODE
#undef DEFINE_RVM_NODE
#undef DEFINE_ALL_NODES
